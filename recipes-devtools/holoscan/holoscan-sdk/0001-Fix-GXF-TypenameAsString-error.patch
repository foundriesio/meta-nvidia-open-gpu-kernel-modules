From 19ec847318b0d52a6d4d742f47b29e21e0d5ae26 Mon Sep 17 00:00:00 2001
From: Ian Stewart <istewart@nvidia.com>
Date: Mon, 12 Jun 2023 15:00:47 -0600
Subject: Fix GXF TypenameAsString error


diff --git a/include/holoscan/core/gxf/entity.hpp b/include/holoscan/core/gxf/entity.hpp
index 25ffed2f..4abfabbe 100644
--- a/include/holoscan/core/gxf/entity.hpp
+++ b/include/holoscan/core/gxf/entity.hpp
@@ -75,7 +75,7 @@ class Entity : public nvidia::gxf::Entity {
     // We first try to get holoscan::gxf::GXFTensor from GXF Entity.
     gxf_tid_t tid;
     auto tid_result =
-        GxfComponentTypeId(context(), nvidia::TypenameAsString<holoscan::gxf::GXFTensor>(), &tid);
+        GxfComponentTypeId(context(), TypenameAsString<holoscan::gxf::GXFTensor>(), &tid);
     if (tid_result != GXF_SUCCESS) {
       if (log_errors) { HOLOSCAN_LOG_ERROR("Unable to get component type id: {}", tid_result); }
       return nullptr;
@@ -86,7 +86,7 @@ class Entity : public nvidia::gxf::Entity {
     if (cid_result != GXF_SUCCESS) {
       // Then, we try to get nvidia::gxf::Tensor from GXF Entity.
       tid_result =
-          GxfComponentTypeId(context(), nvidia::TypenameAsString<nvidia::gxf::Tensor>(), &tid);
+          GxfComponentTypeId(context(), TypenameAsString<nvidia::gxf::Tensor>(), &tid);
       if (tid_result != GXF_SUCCESS) {
         if (log_errors) {
           HOLOSCAN_LOG_ERROR(
@@ -131,7 +131,7 @@ class Entity : public nvidia::gxf::Entity {
   void add(std::shared_ptr<DataT>& data, const char* name = nullptr) {
     gxf_tid_t tid;
     HOLOSCAN_GXF_CALL_FATAL(
-        GxfComponentTypeId(context(), nvidia::TypenameAsString<holoscan::gxf::GXFTensor>(), &tid));
+        GxfComponentTypeId(context(), TypenameAsString<holoscan::gxf::GXFTensor>(), &tid));
 
     gxf_uid_t cid;
     HOLOSCAN_GXF_CALL_FATAL(GxfComponentAdd(context(), eid(), tid, name, &cid));
diff --git a/include/holoscan/core/gxf/gxf_utils.hpp b/include/holoscan/core/gxf/gxf_utils.hpp
index 53b951a5..8fdba801 100644
--- a/include/holoscan/core/gxf/gxf_utils.hpp
+++ b/include/holoscan/core/gxf/gxf_utils.hpp
@@ -262,7 +262,7 @@ inline gxf_uid_t find_component_handle(gxf_context_t context, gxf_uid_t componen
 
   // Get the type id of the component we are are looking for.
   gxf_tid_t tid;
-  const gxf_result_t result_2 = GxfComponentTypeId(context, ::nvidia::TypenameAsString<S>(), &tid);
+  const gxf_result_t result_2 = GxfComponentTypeId(context, TypenameAsString<S>(), &tid);
   if (result_2 != GXF_SUCCESS) { return 0; }
 
   // Find the component in the indicated entity
diff --git a/src/core/gxf/entity.cpp b/src/core/gxf/entity.cpp
index 84425970..c222d8c9 100644
--- a/src/core/gxf/entity.cpp
+++ b/src/core/gxf/entity.cpp
@@ -48,7 +48,7 @@ nvidia::gxf::Handle<nvidia::gxf::VideoBuffer> get_videobuffer(Entity entity, con
   // We first try to get holoscan::gxf::GXFTensor from GXF Entity.
   gxf_tid_t tid;
   auto tid_result = GxfComponentTypeId(
-      entity.context(), nvidia::TypenameAsString<nvidia::gxf::VideoBuffer>(), &tid);
+      entity.context(), TypenameAsString<nvidia::gxf::VideoBuffer>(), &tid);
   if (tid_result != GXF_SUCCESS) {
     throw std::runtime_error(fmt::format("Unable to get component type id: {}", tid_result));
   }
-- 
2.34.1

