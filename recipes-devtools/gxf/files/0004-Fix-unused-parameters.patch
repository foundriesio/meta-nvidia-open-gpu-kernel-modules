From 889d91247a132f97a370e48623f57648b151b712 Mon Sep 17 00:00:00 2001
From: Ian Stewart <istewart@nvidia.com>
Date: Wed, 16 Nov 2022 13:14:45 -0700
Subject: [PATCH 4/6] Fix unused parameters

---
 gxf/std/parameter_parser.hpp  | 12 ++++++------
 gxf/std/parameter_wrapper.hpp |  2 +-
 gxf/std/scheduling_term.hpp   |  2 +-
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/gxf/std/parameter_parser.hpp b/gxf/std/parameter_parser.hpp
index cecb0c5..ee7bb38 100644
--- a/gxf/std/parameter_parser.hpp
+++ b/gxf/std/parameter_parser.hpp
@@ -57,9 +57,9 @@ struct ParameterParser<T> {
 // though it might contain sub children.
 template <>
 struct ParameterParser<std::string> {
-  static Expected<std::string> Parse(gxf_context_t context, gxf_uid_t component_uid,
+  static Expected<std::string> Parse(gxf_context_t /*context*/, gxf_uid_t /*component_uid*/,
                                      const char* key, const YAML::Node& node,
-                                     const std::string& prefix) {
+                                     const std::string& /*prefix*/) {
     try {
       std::stringstream ss;
       ss << node;
@@ -83,9 +83,9 @@ struct FilePath : public std::string {
 
 template <>
 struct ParameterParser<FilePath> {
-  static Expected<FilePath> Parse(gxf_context_t context, gxf_uid_t component_uid,
+  static Expected<FilePath> Parse(gxf_context_t /*context*/, gxf_uid_t /*component_uid*/,
                                   const char* key, const YAML::Node& node,
-                                  const std::string& prefix) {
+                                  const std::string& /*prefix*/) {
     try {
       FilePath path;
       std::stringstream ss;
@@ -104,9 +104,9 @@ struct ParameterParser<FilePath> {
 // Specialization of ParameterParser for uint8_t because it is not supported natively by yaml-cpp
 template <>
 struct ParameterParser<uint8_t> {
-  static Expected<uint8_t> Parse(gxf_context_t context, gxf_uid_t component_uid,
+  static Expected<uint8_t> Parse(gxf_context_t /*context*/, gxf_uid_t /*component_uid*/,
                                  const char* key, const YAML::Node& node,
-                                 const std::string& prefix) {
+                                 const std::string& /*prefix*/) {
     try {
       return static_cast<uint8_t>(node.as<uint32_t>());
     } catch (...) {
diff --git a/gxf/std/parameter_wrapper.hpp b/gxf/std/parameter_wrapper.hpp
index c019bdf..7cd637d 100644
--- a/gxf/std/parameter_wrapper.hpp
+++ b/gxf/std/parameter_wrapper.hpp
@@ -33,7 +33,7 @@ struct ParameterWrapper;
 template <typename T>
 struct ParameterWrapper<T> {
   // Wrap the value to a YAML::Node instance
-  static Expected<YAML::Node> Wrap(gxf_context_t context, const T& value) {
+  static Expected<YAML::Node> Wrap(gxf_context_t /*context*/, const T& value) {
     return YAML::Node(value);
   }
 };
diff --git a/gxf/std/scheduling_term.hpp b/gxf/std/scheduling_term.hpp
index 7078c61..7860a64 100644
--- a/gxf/std/scheduling_term.hpp
+++ b/gxf/std/scheduling_term.hpp
@@ -40,7 +40,7 @@ class SchedulingTerm : public Component {
   virtual gxf_result_t onExecute_abi(int64_t dt) = 0;
 
   // Checks if the state of the scheduling term can be updated and updates it
-  virtual gxf_result_t update_state_abi(int64_t timestamp) { return GXF_SUCCESS; }
+  virtual gxf_result_t update_state_abi(int64_t /*timestamp*/) { return GXF_SUCCESS; }
 
   Expected<SchedulingCondition> check(int64_t timestamp) {
     SchedulingConditionType status;
-- 
2.17.1

